<?xml version="1.0" encoding="UTF-8"?>
<LanguageData>
  
  <!-- EN:
    <li>damaged_inf->bite</li>
    <li>damaged_inf->chomp</li>
    <li>damaged_inf(p=0.5)->nip</li>
    <li>damaged_past->bit</li>
    <li>damaged_past->chomped</li>
    <li>damaged_past->nipped</li>
    <li>damaged_past->gnawed</li>
    <li>damaged_past(deflected!=True)->tore</li>
    <li>damaged_present->biting</li>
    <li>damaged_present->chomping</li>
    <li>damaged_present->nipped</li>
    <li>damaged_present->gnawing</li>
    <li>damaged_present(deflected!=True)->tearing</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->exposing the flesh underneath</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->exposing the machinery underneath</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving grisly tears in the skin</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->leaving grisly tears in the metal</li>
    <li>destroyed_past->tore off</li>
    <li>destroyed_past->ripped off</li>
    <li>destroyed_past->bit off</li>
    <li>destroyed_present->tearing off</li>
    <li>destroyed_present->ripping off</li>
    <li>destroyed_present->biting off</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] bits</li>
    <li>destroyed_suffix->[to] chunks</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] shreds</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] strips</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] messy strips</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] an unrecognizable mess</li>
  -->
  <Maneuver_Bite.rulePack.rulesStrings>
    <li>damaged_inf->morder</li>
    <li>damaged_inf->morder</li>
    <li>damaged_inf(p=0.5)->beliscar</li>
    <li>damaged_past->mordeu</li>
    <li>damaged_past->mastigou</li>
    <li>damaged_past->beliscou</li>
    <li>damaged_past->roeu</li>
    <li>damaged_past(deflected!=True)->rasgou</li>
    <li>damaged_present->mordendo</li>
    <li>damaged_present->mastigando</li>
    <li>damaged_present->beliscando</li>
    <li>damaged_present->roendo</li>
    <li>damaged_present(deflected!=True)->rasgando</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->ficando na carne viva</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->circuitos aparecendo</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->deixando marcas horriveis na pele</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->deixando marcas horriveis no metal</li>
    <li>destroyed_past->arrancou</li>
    <li>destroyed_past->rasgou</li>
    <li>destroyed_past->destruiu</li>
    <li>destroyed_past->mordeu</li>
    <li>destroyed_present->arrancando</li>
    <li>destroyed_present->separando</li>
    <li>destroyed_present->rasgando</li>
    <li>destroyed_present->destruindo</li>
    <li>destroyed_present->mordendo</li>
    <li>destroyed_suffix->[to] peças</li>
    <li>destroyed_suffix->[to] pedaços</li>
    <li>destroyed_suffix->[to] pedaços</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] fragmentos</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] tiras</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] tiras bagunçadas</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] uma bagunça irreconhecível</li>
  </Maneuver_Bite.rulePack.rulesStrings>
  
  <!-- EN:
    <li>r_logentry->[INITIATOR_definite] tried to kick [TOOL_label] in [RECIPIENT_definite]'s eyes, but [RECIPIENT_definite] dodged out of the way.</li>
    <li>r_logentry->[INITIATOR_definite] tried to kick [TOOL_label] in [RECIPIENT_definite]'s eyes, but [RECIPIENT_definite] blocked it.</li>
  -->
  <Maneuver_KickMaterialInEyes_MeleeDodge.rulePack.rulesStrings>
    <li>r_logentry->[INITIATOR_definite] tentou jogar [TOOL_label] nos olhos de [RECIPIENT_definite], mas [RECIPIENT_definite] se desviou.</li>
    <li>r_logentry->[INITIATOR_definite] tentou jogar [TOOL_label] nos olhos de [RECIPIENT_definite], mas [RECIPIENT_definite] bloqueou.</li>
  </Maneuver_KickMaterialInEyes_MeleeDodge.rulePack.rulesStrings>
  
  <!-- EN:
    <li>r_logentry->[INITIATOR_definite] kicked [TOOL_label] in [RECIPIENT_definite]'s eyes.</li>
    <li>r_logentry(p=0.2)->[INITIATOR_definite] kicked a spray of [TOOL_label] in [RECIPIENT_definite]'s eyes.</li>
  -->
  <Maneuver_KickMaterialInEyes_MeleeHit.rulePack.rulesStrings>
    <li>r_logentry->[INITIATOR_definite] jogou [TOOL_label] nos olhos de [RECIPIENT_definite].</li>
    <li>r_logentry(p=0.2)->[INITIATOR_definite] lançou um spray de [TOOL_label] nos olhos de [RECIPIENT_definite].</li>
  </Maneuver_KickMaterialInEyes_MeleeHit.rulePack.rulesStrings>
  
  <!-- EN:
    <li>r_logentry->[INITIATOR_definite] tried to kick [TOOL_label] in [RECIPIENT_definite]'s eyes, but missed.</li>
  -->
  <Maneuver_KickMaterialInEyes_MeleeMiss.rulePack.rulesStrings>
    <li>r_logentry->[INITIATOR_definite] tentou jogar [TOOL_label] nos olhos de [RECIPIENT_definite], mas errou.</li>
  </Maneuver_KickMaterialInEyes_MeleeMiss.rulePack.rulesStrings>
  
  <!-- EN:
    <li>damaged_inf(p=2)->poke</li>
    <li>damaged_inf(p=2)->jab</li>
    <li>damaged_inf->prod</li>
    <li>damaged_inf->shove</li>
    <li>damaged_inf->stab</li>
    <li>damaged_past(p=2)->poked</li>
    <li>damaged_past(p=2)->jabbed</li>
    <li>damaged_past->prodded</li>
    <li>damaged_past->shoved</li>
    <li>damaged_past->stabbed</li>
    <li>damaged_present(p=2)->poking</li>
    <li>damaged_present(p=2)->jabbing</li>
    <li>damaged_present->prodding</li>
    <li>damaged_present->shoving</li>
    <li>damaged_present->stabbing</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving an enormous bruise</li>
    <li>flavortext_consequence->leaving the area visibly deformed</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] off balance</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] to the side</li>
    <li>destroyed_past->shattered</li>
    <li>destroyed_past->crushed</li>
    <li>destroyed_past->obliterated</li>
    <li>destroyed_past->annihilated</li>
    <li>destroyed_past->broke</li>
    <li>destroyed_present->shattering</li>
    <li>destroyed_present->crushing</li>
    <li>destroyed_present->obliterating</li>
    <li>destroyed_present->annihilating</li>
    <li>destroyed_present->breaking</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] bits</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] a fine mist</li>
    <li>destroyed_suffix->[to] fragments</li>
  -->
  <Maneuver_Poke.rulePack.rulesStrings>
    <li>damaged_inf(p=2)->cutucar</li>
    <li>damaged_inf(p=2)->golpear</li>
    <li>damaged_inf->incitar</li>
    <li>damaged_inf->empurrar</li>
    <li>damaged_inf->esfaquear</li>
    <li>damaged_past(p=2)->cutucou</li>
    <li>damaged_past(p=2)->golpeou</li>
    <li>damaged_past->golpeou</li>
    <li>damaged_past->empurrou</li>
    <li>damaged_past->esfaqueou</li>
    <li>damaged_present(p=2)->cutucando</li>
    <li>damaged_present(p=2)->golpeando</li>
    <li>damaged_present->incitando</li>
    <li>damaged_present->empurrando</li>
    <li>damaged_present->esfaqueando</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->deixando um enorme hematoma</li>
    <li>flavortext_consequence->deixando a área visivelmente deformada</li>
    <li>flavortext_consequence->batendo [RECIPIENT_objective] desequilibrando</li>
    <li>flavortext_consequence->batendo [RECIPIENT_objective] para o lado</li>
    <li>destroyed_past->despedaçado</li>
    <li>destroyed_past->esmagado</li>
    <li>destroyed_past->destruido</li>
    <li>destroyed_past->aniquilado</li>
    <li>destroyed_past->quebrado</li>
    <li>destroyed_present->despedaçando</li>
    <li>destroyed_present->esmagando</li>
    <li>destroyed_present->destruindo</li>
    <li>destroyed_present->aniquilando</li>
    <li>destroyed_present->quebrando</li>
    <li>destroyed_suffix->[to] peças</li>
    <li>destroyed_suffix->[to] pedaços</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] uma névoa fina</li>
    <li>destroyed_suffix->[to] fragmentos</li>
  </Maneuver_Poke.rulePack.rulesStrings>
  
  <!-- EN:
    <li>woundname->wound</li>
    <li>woundname(p=0.3)->opening</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->and exposing the flesh underneath</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->and exposing the machinery underneath</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->and leaving a gory [woundname]</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] messy strips</li>
    <li>destroyed_suffix->[to] strips</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] messy pieces</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] fragments</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] a pile of gore</li>
  -->
  <Maneuver_Scratch.rulePack.rulesStrings>
    <li>woundname->ferida</li>
    <li>woundname(p=0.3)->abertura</li>
    <li>flavortext_situation(recipient_flesh!=Mechanoid)->com sangue escorrendo da [woundname]</li>
    <li>flavortext_situation->com fluidos escorrendo da [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->e expondo a carne viva</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->e expondo as peças internas</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->e deixando uma [woundname] sangrando</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] tiras bagunçadas</li>
    <li>destroyed_suffix->[to] tiras</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] peças bagunçadas</li>
    <li>destroyed_suffix->[to] peças</li>
    <li>destroyed_suffix->[to] fragmentos</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] uma pilha de sangue</li>
  </Maneuver_Scratch.rulePack.rulesStrings>
  
  <!-- EN:
    <li>damaged_inf(p=4)->scratch</li>
    <li>damaged_inf(deflected!=True)->lacerate</li>
    <li>damaged_inf(deflected!=True)->tear</li>
    <li>damaged_inf->cut</li>
    <li>damaged_past(p=4)->scratched</li>
    <li>damaged_past(deflected!=True)->lacerated</li>
    <li>damaged_past(deflected!=True)->tore</li>
    <li>damaged_past->cut</li>
    <li>damaged_present->scratching</li>
    <li>damaged_present(deflected!=True)->lacerating</li>
    <li>damaged_present(deflected!=True)->tearing</li>
    <li>damaged_present->cutting</li>
    <li>destroyed_past->mauled</li>
    <li>destroyed_past->lacerated</li>
    <li>destroyed_past->tore</li>
    <li>destroyed_past->shredded</li>
    <li>destroyed_past->ripped</li>
    <li>destroyed_present->mauling</li>
    <li>destroyed_present->lacerating</li>
    <li>destroyed_present->tearing</li>
    <li>destroyed_present->shredding</li>
    <li>destroyed_present->ripping</li>
  -->
  <Maneuver_Scratch_Damage.rulePack.rulesStrings>
    <li>damaged_inf(p=4)->arranhar</li>
    <li>damaged_inf(deflected!=True)->dilacerar</li>
    <li>damaged_inf(deflected!=True)->rasgar</li>
    <li>damaged_inf->cortar</li>
    <li>damaged_past(p=4)->arranhou</li>
    <li>damaged_past(deflected!=True)->dilacerou</li>
    <li>damaged_past(deflected!=True)->rasgou</li>
    <li>damaged_past->cortou</li>
    <li>damaged_present->arranhando</li>
    <li>damaged_present(deflected!=True)->dilacerando</li>
    <li>damaged_present(deflected!=True)->rasgando</li>
    <li>damaged_present->cortando</li>
    <li>destroyed_past->atacou</li>
    <li>destroyed_past->lacerado</li>
    <li>destroyed_past->arrancou</li>
    <li>destroyed_past->desfiou</li>
    <li>destroyed_past->rasgou</li>
    <li>destroyed_present->atacando</li>
    <li>destroyed_present->lacerando</li>
    <li>destroyed_present->arrancando</li>
    <li>destroyed_present->desfiando</li>
    <li>destroyed_present->rasgando</li>
  </Maneuver_Scratch_Damage.rulePack.rulesStrings>
  
  <!-- EN:
    <li>damaged_inf(p=4)->slash</li>
    <li>damaged_inf->cut</li>
    <li>damaged_inf->chop</li>
    <li>damaged_inf->hack</li>
    <li>damaged_inf->slice</li>
    <li>damaged_inf(deflected!=True)->gash</li>
    <li>damaged_past(p=4)->slashed</li>
    <li>damaged_past->cut</li>
    <li>damaged_past->chopped</li>
    <li>damaged_past->hacked</li>
    <li>damaged_past->sliced</li>
    <li>damaged_past(deflected!=True)->gashed</li>
    <li>damaged_present->slashing</li>
    <li>damaged_present->cutting</li>
    <li>damaged_present->slicing</li>
    <li>damaged_present(deflected!=True)->gashing</li>
    <li>damaged_present(deflected!=True)->tearing</li>
    <li>damaged_present(deflected!=True)->lacerating</li>
    <li>woundname->wound</li>
    <li>woundname(p=0.3)->opening</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->exposing the flesh underneath</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->exposing the machinery underneath</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a gory [woundname]</li>
    <li>destroyed_past->bisected</li>
    <li>destroyed_past->divided</li>
    <li>destroyed_past->halved</li>
    <li>destroyed_past->separated</li>
    <li>destroyed_past->split</li>
    <li>destroyed_present->bisecting</li>
    <li>destroyed_present->dividing</li>
    <li>destroyed_present->halving</li>
    <li>destroyed_present->separating</li>
    <li>destroyed_present->splitting</li>
    <li>destroyed_suffix->into neat pieces</li>
    <li>destroyed_suffix->cleanly</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->exposing its inner workings</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->slicing it in twain</li>
  -->
  <Maneuver_Slash.rulePack.rulesStrings>
    <li>damaged_inf(p=4)->golpear</li>
    <li>damaged_inf->cortar</li>
    <li>damaged_inf->cortar</li>
    <li>damaged_inf->cortar</li>
    <li>damaged_inf->fatiar</li>
    <li>damaged_inf(deflected!=True)->rasgar</li>
    <li>damaged_past(p=4)->golpeou</li>
    <li>damaged_past->cortou</li>
    <li>damaged_past->cortou</li>
    <li>damaged_past->cortou</li>
    <li>damaged_past->fatiou</li>
    <li>damaged_past(deflected!=True)->rasgou</li>
    <li>damaged_present->golpeando</li>
    <li>damaged_present->cortando</li>
    <li>damaged_present->fatiando</li>
    <li>damaged_present(deflected!=True)->rasgando</li>
    <li>damaged_present(deflected!=True)->rasgando</li>
    <li>damaged_present(deflected!=True)->dilacerando</li>
    <li>woundname->ferida</li>
    <li>woundname(p=0.3)->abrindo</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->expondo a carne de baixo</li>
    <li>flavortext_consequence(recipient_flesh==Mechanoid)->expondo o maquinário de baixo</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->deixando um sangrento [woundname]</li>
    <li>destroyed_past->bissectado</li>
    <li>destroyed_past->dividido</li>
    <li>destroyed_past->dividido pela metade</li>
    <li>destroyed_past->separado</li>
    <li>destroyed_past->dividido</li>
    <li>destroyed_present->dividindo</li>
    <li>destroyed_present->dividindo</li>
    <li>destroyed_present->dividindo no meio</li>
    <li>destroyed_present->separando</li>
    <li>destroyed_present->dividindo</li>
    <li>destroyed_suffix->em pedaços</li>
    <li>destroyed_suffix->limpo</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->expondo seu funcionamento interno</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->cortando em dois</li>
  </Maneuver_Slash.rulePack.rulesStrings>
  
  <!-- EN:
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving an enormous bruise</li>
    <li>flavortext_consequence->leaving the area visibly deformed</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] off balance</li>
    <li>flavortext_consequence->knocking [RECIPIENT_objective] to the side</li>
    <li>destroyed_suffix->[to] pieces</li>
    <li>destroyed_suffix->[to] bits</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] a fine mist</li>
    <li>destroyed_suffix->[to] fragments</li>
  -->
  <Maneuver_Smash.rulePack.rulesStrings>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->deixando um enorme hematoma</li>
    <li>flavortext_consequence->deixando a área visivelmente deformada</li>
    <li>flavortext_consequence->deixando [RECIPIENT_pronoun] desequilibrado</li>
    <li>flavortext_consequence->deixando [RECIPIENT_pronoun] de lado</li>
    <li>destroyed_suffix->[to] peças</li>
    <li>destroyed_suffix->[to] pedaços</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid)->[to] uma névoa fina</li>
    <li>destroyed_suffix->[to] fragmentos</li>
  </Maneuver_Smash.rulePack.rulesStrings>
  
  <!-- EN:
    <li>damaged_inf->hit</li>
    <li>damaged_inf->smash</li>
    <li>damaged_inf->bash</li>
    <li>damaged_inf->slam</li>
    <li>damaged_inf->strike</li>
    <li>damaged_inf->beat</li>
    <li>damaged_past->hit</li>
    <li>damaged_past->smashed</li>
    <li>damaged_past->bashed</li>
    <li>damaged_past->slammed</li>
    <li>damaged_past->struck</li>
    <li>damaged_past->beat</li>
    <li>damaged_present->smashing</li>
    <li>damaged_present->bashing</li>
    <li>damaged_present(deflected!=True)->bruising</li>
    <li>destroyed_past->shattered</li>
    <li>destroyed_past->crushed</li>
    <li>destroyed_past->broke</li>
    <li>destroyed_present->shattering</li>
    <li>destroyed_present->crushing</li>
    <li>destroyed_present->breaking</li>
  -->
  <Maneuver_Smash_Damage.rulePack.rulesStrings>
    <li>damaged_inf(p=4)->esmagar</li>
    <li>damaged_inf->surrar</li>
    <li>damaged_inf->espancar</li>
    <li>damaged_inf->atacar</li>
    <li>damaged_inf->atacar</li>
    <li>damaged_past(p=4)->esmagou</li>
    <li>damaged_past->surrou</li>
    <li>damaged_past->espancou</li>
    <li>damaged_past->atacou</li>
    <li>damaged_past->atacou</li>
    <li>damaged_present->esmagando</li>
    <li>damaged_present->batendo</li>
    <li>damaged_present->espancando</li>
    <li>damaged_present(deflected!=True)->atacando</li>
    <li>damaged_present(deflected!=True)->atacando</li>
    <li>destroyed_past->despedaçado</li>
    <li>destroyed_past->esmagado</li>
    <li>destroyed_past->destruido</li>
    <li>destroyed_past->aniquilado</li>
    <li>destroyed_past->quebrado</li>
    <li>destroyed_present->despedaçando</li>
    <li>destroyed_present->esmagando</li>
    <li>destroyed_present->destruindo</li>
    <li>destroyed_present->aniquilando</li>
    <li>destroyed_present->quebrando</li>
  </Maneuver_Smash_Damage.rulePack.rulesStrings>
  
  <!-- EN:
    <li>damaged_inf(p=4)->stab</li>
    <li>damaged_inf->jab</li>
    <li>damaged_inf(deflected!=True)->pierce</li>
    <li>damaged_inf(deflected!=True)->puncture</li>
    <li>damaged_inf(deflected!=True)->skewer</li>
    <li>damaged_past(p=4)->stabbed</li>
    <li>damaged_past->jabbed</li>
    <li>damaged_past(deflected!=True)->pierced</li>
    <li>damaged_past(deflected!=True)->punctured</li>
    <li>damaged_past(deflected!=True)->skewered</li>
    <li>damaged_present(deflected!=True)->piercing</li>
    <li>damaged_present(deflected!=True)->puncturing</li>
    <li>damaged_present(deflected!=True)->penetrating</li>
    <li>damaged_present(deflected!=True)->skewering</li>
    <li>woundname->hole</li>
    <li>woundname->wound</li>
    <li>woundname->crevice</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a bloody [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a torn [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->leaving a bleeding [woundname]</li>
    <li>destroyed_past->impaled</li>
    <li>destroyed_past->perforated</li>
    <li>destroyed_past->skewered</li>
    <li>destroyed_present->impaling</li>
    <li>destroyed_present->perforating</li>
    <li>destroyed_present->skewering</li>
    <li>destroyed_suffix->straight through</li>
    <li>destroyed_suffix->leaving a clean hole</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid,target_part_destroyed_count==1)->leaving it leaking gory fluids</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->leaving it leaking unrecognizable fluids</li>
  -->
  <Maneuver_Stab.rulePack.rulesStrings>
    <li>damaged_inf(p=4)->apunhalar</li>
    <li>damaged_inf->furar</li>
    <li>damaged_inf(deflected!=True)->perfurar</li>
    <li>damaged_inf(deflected!=True)->punçar</li>
    <li>damaged_inf(deflected!=True)->espetar</li>
    <li>damaged_past(p=4)->apunhalou</li>
    <li>damaged_past->furou</li>
    <li>damaged_past(deflected!=True)->perfurou</li>
    <li>damaged_past(deflected!=True)->perfurou</li>
    <li>damaged_past(deflected!=True)->espetou</li>
    <li>damaged_present(deflected!=True)->furando</li>
    <li>damaged_present(deflected!=True)->perfurando</li>
    <li>damaged_present(deflected!=True)->penetrando</li>
    <li>damaged_present(deflected!=True)->espetando</li>
    <li>woundname->buraco</li>
    <li>woundname->ferida</li>
    <li>woundname->fenda</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->deixando um sangrento [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->deixando um rasgado [woundname]</li>
    <li>flavortext_consequence(recipient_flesh!=Mechanoid)->deixando um sangramento [woundname]</li>
    <li>destroyed_past->impalado</li>
    <li>destroyed_past->perfurado</li>
    <li>destroyed_past->espetado</li>
    <li>destroyed_present->impalando</li>
    <li>destroyed_present->perfurando</li>
    <li>destroyed_present->espetando</li>
    <li>destroyed_suffix->diretamente através</li>
    <li>destroyed_suffix->deixando um buraco limpo</li>
    <li>destroyed_suffix(recipient_flesh!=Mechanoid,target_part_destroyed_count==1)->deixando fluidos vazando</li>
    <li>destroyed_suffix(target_part_destroyed_count==1)->deixando fluidos irreconhecíveis vazando</li>
  </Maneuver_Stab.rulePack.rulesStrings>
  
</LanguageData>